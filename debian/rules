#!/usr/bin/make -f

export DH_VERBOSE=1
export GO111MODULE=on # Ensure Go modules are enabled for all Go operations

# Standard debhelper sequence with Go support.
# dpkg-buildpackage will be invoked from the root of the actual
# upstream source tree where the debian/ directory has been copied.
# Thus, all Makefile commands here operate relative to that root.
%:
	dh $@ --with golang

# Override dh_auto_clean to call upstream's clean target but ignore errors.
override_dh_auto_clean:
	@echo "Running overridden dh_auto_clean to clean upstream..."
	# GO111MODULE=on is inherited from the export at the top of the file
	-$(MAKE) clean

# Override the build step to use upstream's Makefile.
override_dh_auto_build:
	@echo "Running overridden dh_auto_build to build upstream..."
	# Ensure Go modules are downloaded and tidy before building.
	# These commands are run in the current directory, which is the upstream source root.
	# GO111MODULE=on is inherited.
	go mod tidy
	go mod download
	$(MAKE) build

# Override the install step:
# 1. Manually copy the binary built by upstream's Makefile to our staging area.
# 2. Then, let dh_auto_install handle other installations (like config files via .install).
override_dh_auto_install:
	@echo "Running overridden dh_auto_install..."
	# Create the target directory in the package staging area (e.g., debian/fan2go/usr/bin)
	# $(CURDIR) here refers to the root of the source tree where dpkg-buildpackage is running.
	mkdir -p $(CURDIR)/debian/fan2go/usr/bin
	
	# Copy the compiled binary from bin/fan2go (relative to the source tree root)
	# to the staging directory.
	cp $(CURDIR)/bin/fan2go $(CURDIR)/debian/fan2go/usr/bin/fan2go
	
	# Now run the standard dh_auto_install to process debian/*.install files, etc.
	dh_auto_install
