name: Upstream Updater

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  push:
    branches: [main]
    paths:
      - '.github/workflows/updater.yml'

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      NEW_UPSTREAM: ${{ steps.check_upstream.outputs.NEW_UPSTREAM }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.UPDATE_PAT }}

      - name: Set up branches
        run: |
          git checkout -b upstream origin/upstream || git checkout upstream
          git checkout -b debian/unstable origin/debian/unstable || git checkout debian/unstable

      - name: Setup dependencies
        run: |
          sudo apt update
          sudo apt install -y devscripts git-buildpackage

      - name: Import new upstream version
        env:
          DEBEMAIL: "actions@github.com"
          DEBFULLNAME: "Automatic Packaging GitHub Action"
        run: |
          git config user.name "Automatic Packaging GitHub Action"
          git config user.email "actions@github.com"
          
          # Check if there's a new upstream version
          echo "Checking for new upstream versions..."
          if uscan --verbose --report-status 2>&1 | grep -q "Newer package available"; then
            echo "New upstream version found, importing..."
            
            # Get the new version number
            NEW_VERSION=$(uscan --report --dehs | grep -o '<upstream-version>[^<]*' | sed 's/<upstream-version>//')
            echo "Detected upstream version: $NEW_VERSION"
            
            # Delete existing tag if it exists to allow re-import
            if git tag -l | grep -q "upstream/$NEW_VERSION"; then
              echo "Deleting existing upstream tag upstream/$NEW_VERSION"
              git tag -d "upstream/$NEW_VERSION" || true
              git push origin --delete "upstream/$NEW_VERSION" || true
            fi
            
            gbp import-orig --uscan --merge \
              --upstream-branch=upstream \
              --debian-branch=debian/unstable \
              --pristine-tar \
              --no-interactive
            
            # Smart changelog version management
            echo "=== Changelog Version Management ==="
            
            # Extract versions for comparison
            CURRENT_VERSION=$(dpkg-parsechangelog --show-field Version || echo "none")
            LATEST_UPSTREAM_TAG=$(git tag -l "upstream/*" | sort -V | tail -1)
            NEW_UPSTREAM_VERSION=${LATEST_UPSTREAM_TAG#upstream/}
            
            echo "Current changelog version: $CURRENT_VERSION"
            echo "Newly imported upstream version: $NEW_UPSTREAM_VERSION"
            
            # Parse upstream portion of current version (everything before first dash)
            if [[ "$CURRENT_VERSION" != "none" ]]; then
              CURRENT_UPSTREAM_VERSION="${CURRENT_VERSION%%-*}"
            else
              CURRENT_UPSTREAM_VERSION="none"
            fi
            echo "Current upstream portion: $CURRENT_UPSTREAM_VERSION"
            
            # Decision logic
            if [[ "$CURRENT_UPSTREAM_VERSION" != "$NEW_UPSTREAM_VERSION" ]]; then
              echo ">>> New upstream version detected: $CURRENT_UPSTREAM_VERSION -> $NEW_UPSTREAM_VERSION"
              echo ">>> Creating new changelog entry for ${NEW_UPSTREAM_VERSION}-1"
              
              gbp dch --new-version=${NEW_UPSTREAM_VERSION}-1 \
                --distribution=unstable \
                --release \
                --commit \
                --spawn-editor=never \
                --commit-msg="Update changelog for ${NEW_UPSTREAM_VERSION} upstream release" \
                --debian-branch=debian/unstable \
                --upstream-branch=upstream
                
            elif [[ "$CURRENT_VERSION" != "none" ]]; then
              echo ">>> Same upstream version, incrementing Debian revision"
              echo ">>> Using dch -i to increment from $CURRENT_VERSION"
              
              dch -i \
                --distribution=unstable \
                --urgency=medium \
                "Automated packaging update"
              
              # Commit the changelog update
              git add debian/changelog
              git commit -m "Increment Debian revision for packaging updates"
              
            else
              echo ">>> No existing changelog, creating initial entry for ${NEW_UPSTREAM_VERSION}-1"
              
              gbp dch --new-version=${NEW_UPSTREAM_VERSION}-1 \
                --distribution=unstable \
                --release \
                --commit \
                --spawn-editor=never \
                --commit-msg="Initial changelog for ${NEW_UPSTREAM_VERSION}" \
                --debian-branch=debian/unstable \
                --upstream-branch=upstream
            fi
            
            echo "=== Changelog update completed ==="
            
            # Push upstream branch and tags (DEP-14 format: upstream/<version>)
            git push "https://token:${{ secrets.UPDATE_PAT }}@github.com/${{ github.repository }}.git" upstream
            git push "https://token:${{ secrets.UPDATE_PAT }}@github.com/${{ github.repository }}.git" --tags
            
            # Push debian/unstable branch (now includes updated changelog)
            git push "https://token:${{ secrets.UPDATE_PAT }}@github.com/${{ github.repository }}.git" debian/unstable
            
            echo "NEW_UPSTREAM=true" >> $GITHUB_OUTPUT
          else
            echo "No new upstream version found - this is normal and expected"
            echo "Action completed successfully"
            echo "NEW_UPSTREAM=false" >> $GITHUB_OUTPUT
          fi
        id: check_upstream

      - name: Push pristine-tar updates
        run: |
          # Push pristine-tar branch if it exists
          if git show-ref --verify --quiet refs/heads/pristine-tar; then
            git push "https://token:${{ secrets.UPDATE_PAT }}@github.com/${{ github.repository }}.git" pristine-tar
          fi

  build_and_release:
    needs: update
    if: needs.update.outputs.NEW_UPSTREAM == 'true'
    permissions:
      contents: write
    uses: ./.github/workflows/build-test.yml
    with:
      create_release: true